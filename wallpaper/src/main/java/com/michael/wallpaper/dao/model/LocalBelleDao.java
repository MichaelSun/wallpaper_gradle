package com.michael.wallpaper.dao.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.michael.wallpaper.dao.model.LocalBelle;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LOCAL_BELLE.
*/
public class LocalBelleDao extends AbstractDao<LocalBelle, Void> {

    public static final String TABLENAME = "LOCAL_BELLE";

    /**
     * Properties of entity LocalBelle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", false, "ID");
        public final static Property Time = new Property(1, long.class, "time", false, "TIME");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property Desc = new Property(3, String.class, "desc", false, "DESC");
        public final static Property Url = new Property(4, String.class, "url", false, "URL");
        public final static Property RawUrl = new Property(5, String.class, "rawUrl", false, "RAW_URL");
    };


    public LocalBelleDao(DaoConfig config) {
        super(config);
    }
    
    public LocalBelleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LOCAL_BELLE' (" + //
                "'ID' INTEGER NOT NULL ," + // 0: id
                "'TIME' INTEGER NOT NULL ," + // 1: time
                "'TYPE' INTEGER NOT NULL ," + // 2: type
                "'DESC' TEXT," + // 3: desc
                "'URL' TEXT NOT NULL ," + // 4: url
                "'RAW_URL' TEXT);"); // 5: rawUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LOCAL_BELLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LocalBelle entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getTime());
        stmt.bindLong(3, entity.getType());
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(4, desc);
        }
        stmt.bindString(5, entity.getUrl());
 
        String rawUrl = entity.getRawUrl();
        if (rawUrl != null) {
            stmt.bindString(6, rawUrl);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public LocalBelle readEntity(Cursor cursor, int offset) {
        LocalBelle entity = new LocalBelle( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // time
            cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // desc
            cursor.getString(offset + 4), // url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // rawUrl
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LocalBelle entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTime(cursor.getLong(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setDesc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUrl(cursor.getString(offset + 4));
        entity.setRawUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(LocalBelle entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(LocalBelle entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
